/*
*    Project Euler problem solutions
*     - Philip Miller
*    
*    Solution to problem 2
*/

public final class Euler0002 {

	public static void solution() {
		long t1, t2, delta, sol;

		System.out.println("\nProject Euler - Problem 2");
		System.out.println("-------------------------");
		System.out.println("Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n");
		System.out.println("    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n");
		System.out.println("By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n");

		
		System.out.println("Solution 1 - O(n) runtime");
		t1 = System.currentTimeMillis();
		sol = bruteforce(4000000);
		t2  = System.currentTimeMillis();
		delta = t2-t1;
		System.out.println(sol);
		System.out.println("Answer generated in " + delta + " ms\n");

		System.out.println("Solution 2 - O(n) runtime but with a third of the calculations");
		t1 = System.currentTimeMillis();
		sol = bruteforce(4000000);
		t2  = System.currentTimeMillis();
		delta = t2-t1;
		System.out.println(sol);
		System.out.println("Answer generated in " + delta + " ms\n");
	}

	// The O(n) solution
	private static long bruteforce(long sumBelow) {
		if (sumBelow < 2) {
			throw new IllegalArgumentException("Value must be greater than or equal to 2");
		}
		long sum = 0;
		long Fib_neg1 = 2;
		long Fib_neg2 = 1;
		long currFib = 2;
		while (currFib < sumBelow) {
			if (currFib % 2 == 0) {
				sum += currFib;
			}
			currFib = Fib_neg1 + Fib_neg2;
			Fib_neg2 = Fib_neg1;
			Fib_neg1 = currFib;
		}
		return sum;
	}

	// The O(n) solution with a third of the calculations
	//
	// Note: Every third number in the Fibonacci sequence is an even number.
	// We only need to calculate these numbers, so we can reduce the equation
	// as follows:
	//
	// Fn = Fn-1 + Fn-2
	// Fn = Fn-2 + Fn-2 + Fn-3 (note that Fn-1 = Fn-2 + Fn-3)
	// Fn = Fn-2 + Fn-3 + Fn-3 + Fn-4
	// Fn = Fn-3 + Fn-3 + Fn-3 + Fn-4 + Fn-4
	// Fn = Fn-3 + Fn-3 + Fn-3 + Fn-4 + Fn-5 + Fn-6
	// Fn = Fn-3 + Fn-3 + Fn-3 + Fn-3 + Fn-6
	// Fn = 4*Fn-3 + Fn-6
	private static long everyThird(long sumBelow) {
		if (sumBelow < 2) {
			throw new IllegalArgumentException("Value must be greater than or equal to 2");
		}
		long sum = 0;
		long Fib_neg3 = 2;
		long Fib_neg6 = 0;
		long currFib = 2;
		while (currFib < sumBelow) {
			sum += currFib;
			currFib = 4*Fib_neg3 + Fib_neg6;
			Fib_neg6 = Fib_neg3;
			Fib_neg3 = currFib;
		}
		return sum;
	}


}